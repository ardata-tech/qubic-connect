{"version":3,"file":"component---src-pages-index-tsx-5893e713955ee6167ea1.js","mappings":"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","sources":["webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/base.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/chain/ChainService.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/chain/index.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/client/http.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/constants.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/contract/ContractService.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/contract/index.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/core.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/crypto/index.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/crypto/keccakp.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/identity/IdentityService.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/identity/index.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/index.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/provider.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/qx/QxService.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/qx/index.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/transaction/TransactionBuilder.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/transaction/TransactionService.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/transaction/index.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/utils/UtilityService.js","webpack://site/../../node_modules/@ardata-tech/qubic-js/dist/utils/index.js","webpack://site/../../node_modules/bignumber.js/bignumber.js","webpack://site/./src/pages/index.tsx"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QubicBase = void 0;\nconst http_1 = require(\"./client/http\");\nconst constants_1 = require(\"./constants\");\nconst crypto_1 = __importDefault(require(\"./crypto\"));\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nclass QubicBase {\n    constructor(provider) {\n        this.providerOptions = provider.getProviderOptions();\n        this.version = `v${this.providerOptions.version}`;\n        this.httpClient = new http_1.HttpClient(this.providerOptions.providerUrl);\n    }\n    /**\n     * Derives a public identity string from a given public key.\n     */\n    async getIdentity(publicKey, lowerCase = false) {\n        let newId = \"\";\n        // Process the public key in chunks to generate an identity string\n        for (let i = 0; i < 4; i++) {\n            let longNumber = new bignumber_js_1.default(0);\n            longNumber.decimalPlaces(0);\n            // Convert each byte chunk into a large numerical representation\n            publicKey.slice(i * 8, (i + 1) * 8).forEach((val, index) => {\n                longNumber = longNumber.plus(new bignumber_js_1.default((val * 256 ** index).toString(2), 2));\n            });\n            // Convert the number into an alphanumeric identity segment\n            for (let j = 0; j < 14; j++) {\n                newId += String.fromCharCode(longNumber\n                    .mod(26)\n                    .plus((lowerCase ? \"a\" : \"A\").charCodeAt(0))\n                    .toNumber());\n                longNumber = longNumber.div(26);\n            }\n        }\n        // Generate a checksum for identity validation\n        const checksum = await this.getCheckSum(publicKey);\n        let identityBytesChecksum = (checksum[2] << 16) | (checksum[1] << 8) | checksum[0];\n        identityBytesChecksum &= 0x3ffff;\n        // Append checksum-derived characters to the identity\n        for (let i = 0; i < 4; i++) {\n            newId += String.fromCharCode((identityBytesChecksum % 26) + (lowerCase ? \"a\" : \"A\").charCodeAt(0));\n            identityBytesChecksum /= 26;\n        }\n        return newId;\n    }\n    /**\n     * Converts a public identity string into a byte array.\n     */\n    getIdentityBytes(identity) {\n        const publicKeyBytes = new Uint8Array(32);\n        const view = new DataView(publicKeyBytes.buffer, 0);\n        // Convert identity characters into numerical values and reconstruct public key\n        for (let i = 0; i < 4; i++) {\n            view.setBigUint64(i * 8, 0n, true);\n            for (let j = 14; j-- > 0;) {\n                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) * 26n +\n                    BigInt(identity.charCodeAt(i * 14 + j)) -\n                    BigInt(\"A\".charCodeAt(0)), true);\n            }\n        }\n        return publicKeyBytes;\n    }\n    /**\n     * Generates a complete ID package, including a public-private key pair and\n     * a derived public identity, based on the provided seed.\n     */\n    async createIdPackage(seed) {\n        const { schnorrq, K12 } = await crypto_1.default;\n        // Generate a private key using the seed and hash function K12\n        const privateKey = this.generatePrivateKey(seed, 0, K12);\n        // Derive the public key from the private key\n        const publicKey = schnorrq.generatePublicKey(privateKey);\n        // Compute the public identity from the public key\n        const publicId = await this.getIdentity(publicKey);\n        return { publicKey, privateKey, publicId };\n    }\n    /**\n     * Generates a private key from a seed using an iterative process.\n     */\n    generatePrivateKey(seed, index, K12) {\n        // Convert the seed string into a byte array\n        const byteSeed = this.seedToBytes(seed);\n        // Modify the byte array based on the iteration index\n        const preimage = byteSeed.slice();\n        while (index-- > 0) {\n            for (let i = 0; i < preimage.length; i++) {\n                if (++preimage[i] > constants_1.QubicConstants.SEED_ALPHABET.length) {\n                    preimage[i] = 1;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        // Generate a private key using the K12 cryptographic function\n        const key = new Uint8Array(constants_1.QubicConstants.PRIVATE_KEY_LENGTH);\n        K12(preimage, key, constants_1.QubicConstants.PRIVATE_KEY_LENGTH);\n        return key;\n    }\n    /**\n     * Converts a seed string into a byte array using the predefined alphabet.\n     */\n    seedToBytes(seed) {\n        const bytes = new Uint8Array(seed.length);\n        // Convert each character in the seed to its corresponding index in the alphabet\n        for (let i = 0; i < seed.length; i++) {\n            bytes[i] = constants_1.QubicConstants.SEED_ALPHABET.indexOf(seed[i]);\n        }\n        return bytes;\n    }\n    /**\n     * Computes a cryptographic checksum for a given public key.\n     */\n    async getCheckSum(publicKey) {\n        const { K12 } = await crypto_1.default;\n        // Compute a cryptographic digest of the public key\n        const digest = new Uint8Array(constants_1.QubicConstants.DIGEST_LENGTH);\n        K12(publicKey, digest, constants_1.QubicConstants.DIGEST_LENGTH);\n        // Extract and return the checksum from the digest\n        return digest.slice(0, constants_1.QubicConstants.CHECKSUM_LENGTH);\n    }\n}\nexports.QubicBase = QubicBase;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChainService = void 0;\nconst base_1 = require(\"../base\");\nclass ChainService extends base_1.QubicBase {\n    constructor(provider) {\n        super(provider);\n    }\n    /**\n     * Retrieves the latest tick of the chain.\n     *\n     * @returns {Promise<number | null>} The latest tick of the chain, or null if an error occurred.\n     */\n    async getLatestTick() {\n        try {\n            const response = await this.httpClient.call(`/${this.version}/latestTick`, \"GET\");\n            return response?.latestTick;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch latest tick: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the tick data for the specified tick.\n     *\n     * @param {number} tickNumber The tick number for which to fetch the tick data.\n     * @returns {Promise<IGetTickData | null>} A promise that resolves to the tick data, or null if an error occurred.\n     */\n    async getTickData(tickNumber) {\n        try {\n            const response = await this.httpClient.call(`/${this.version}/ticks/${tickNumber}/tick-data`, \"GET\");\n            return response;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch tick data for tick number ${tickNumber}: ${error.message}`);\n        }\n    }\n    /**\n     * Fetches the RPC status.\n     *\n     * @returns {Promise<IGetRpcStatus | null>} A promise that resolves to the RPC status.\n     */\n    async getRpcStatus() {\n        try {\n            const response = await this.httpClient.call(`/${this.version}/status`, \"GET\");\n            return response;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch RPC status: ${error.message}`);\n        }\n    }\n    /**\n     * Fetches the chain hash for the given tick number.\n     *\n     * @param {number} tickNumber The tick number for which to fetch the chain hash.\n     * @returns {Promise<IChainHash | null>} A promise that resolves to the chain hash, or null if an error occurred.\n     */\n    async getChainHash(tickNumber) {\n        try {\n            return await this.httpClient.call(`/${this.version}/ticks/${tickNumber}/chain-hash`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch chain hash for tick number ${tickNumber}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the quorum tick data for the specified tick number.\n     *\n     * @param {number} tickNumber - The tick number for which to fetch the quorum tick data.\n     * @returns {Promise<IGetQuorumTickData | null>} A promise that resolves to the quorum tick data, or null if an error occurred.\n     */\n    async getQuorumTickData(tickNumber) {\n        try {\n            return await this.httpClient.call(`/${this.version}/ticks/${tickNumber}/quorum-tick-data`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch quorum tick data for tick number ${tickNumber}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the store hash for the specified tick number.\n     *\n     * @param {number} tickNumber - The tick number for which to fetch the store hash.\n     * @returns {Promise<IChainHash | null>} A promise that resolves to the store hash, or null if an error occurred.\n     */\n    async getStoreHash(tickNumber) {\n        try {\n            return await this.httpClient.call(`/${this.version}/ticks/${tickNumber}/store-hash`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch store hash for tick number ${tickNumber}: ${error.message}`);\n        }\n    }\n    /**\n     * Performs a health check for the Qubic network.\n     *\n     * @returns {Promise<IGetHealthCheck | null>} A promise that resolves to the health check result, or null if an error occurred.\n     */\n    async getHealthCheck() {\n        try {\n            return await this.httpClient.call(`/${this.version}/healthcheck`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to perform health check: ${error.message}`);\n        }\n    }\n    /**\n     * Fetches the list of computors for the specified epoch.\n     *\n     * @param {number} epoch The epoch for which to fetch the computors.\n     * @returns {Promise<IGetComputors | null>} A promise that resolves to the list of computors, or null if an error occurred.\n     */\n    async getComputors(epoch) {\n        try {\n            return await this.httpClient.call(`/${this.version}/epochs/${epoch}/computors`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch computors for epoch ${epoch}: ${error.message}`);\n        }\n    }\n    /**\n     * Fetches the current tick information from the chain.\n     *\n     * @returns {Promise<IGetTickInfo | null>} A promise that resolves to the tick info.\n     */\n    async getTickInfo() {\n        try {\n            return await this.httpClient.call(`/${this.version}/tick-info`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch tick info: ${error.message}`);\n        }\n    }\n    /**\n     * Fetches the current block height from the chain.\n     *\n     * @returns {Promise<IGetBlockHeight | null>} A promise that resolves to the block height.\n     */\n    async getBlockHeight() {\n        try {\n            return await this.httpClient.call(`/${this.version}/block-height`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch block height: ${error.message}`);\n        }\n    }\n    /**\n     * Fetches the latest statistics from the chain.\n     *\n     * @returns {Promise<any>} A promise that resolves to the latest statistics.\n     */\n    async getLatestStats() {\n        try {\n            return await this.httpClient.call(`/${this.version}/latest-stats`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch latest stats: ${error.message}`);\n        }\n    }\n}\nexports.ChainService = ChainService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChainService = void 0;\nvar ChainService_1 = require(\"./ChainService\");\nObject.defineProperty(exports, \"ChainService\", { enumerable: true, get: function () { return ChainService_1.ChainService; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = void 0;\nclass HttpClient {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n    async call(endpoint, method, body) {\n        const response = await fetch(this.baseUrl + endpoint, {\n            method,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            ...(body && { body: JSON.stringify(body) }),\n        });\n        if (!response.ok) {\n            const message = await response.text();\n            if (message) {\n                console.log(\"error message\", message);\n            }\n            throw new Error(`[HttpClient] HTTP Error: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\nexports.HttpClient = HttpClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QubicConstants = void 0;\nclass QubicConstants {\n}\nexports.QubicConstants = QubicConstants;\nQubicConstants.SEED_ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\nQubicConstants.SIGNATURE_LENGTH = 64;\nQubicConstants.PUBLIC_KEY_LENGTH = 32;\nQubicConstants.PRIVATE_KEY_LENGTH = 32;\nQubicConstants.CHECKSUM_LENGTH = 3;\nQubicConstants.MAX_TRANSACTION_SIZE = 1024;\nQubicConstants.DIGEST_LENGTH = 32;\nQubicConstants.SPECTRUM_DEPTH = 24;\nQubicConstants.NUMBER_OF_TRANSACTIONS_PER_TICK = 1024;\nQubicConstants.MAX_NUMBER_OF_CONTRACTS = 1024;\nQubicConstants.EMPTY_ADDRESS = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\nQubicConstants.QX_ADDRESS = \"BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARMID\";\nQubicConstants.ARBITRATOR = \"AFZPUAIYVPNUYGJRQVLUKOPPVLHAZQTGLYAAUUNBXFTVTAMSBKQBLEIEPCVJ\";\nQubicConstants.QX_TRANSFER_ASSET_FEE = 100; // 100 Qubic's\nQubicConstants.QX_ISSUE_ASSET_FEE = 1000000000; // 1b Qubic's\nQubicConstants.QX_ISSUE_ASSET_INPUT_TYPE = 1; // input type for a tx to issue an asset\nQubicConstants.QX_TRANSFER_ASSET_INPUT_TYPE = 2; // input type for a tx to transfer an asset\nQubicConstants.QX_ADD_ASK_ORDER = 5; // input type for a tx to create an ask order\nQubicConstants.QX_ADD_BID_ORDER = 6; // input type for a tx to create a bid order\nQubicConstants.QX_REMOVE_ASK_ORDER = 7; // input type for a tx to remove an ask order\nQubicConstants.QX_REMOVE_BID_ORDER = 8; // input type for a tx to remove a bid order\nQubicConstants.QUTIL_ADDRESS = \"EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVWRF\";\nQubicConstants.QUTIL_SENDMANY_INPUT_TYPE = 1; // input type for send many on Qutil\nQubicConstants.QUTIL_SENDMANY_FEE = 10; // fee in qubics for send many\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractService = void 0;\nconst base_1 = require(\"../base\");\nclass ContractService extends base_1.QubicBase {\n    constructor(provider, contractAddress) {\n        super(provider);\n        this.address = contractAddress;\n    }\n    async querySmartContract(body) {\n        try {\n            return await this.httpClient.call(`/${this.version}/querySmartContract`, \"POST\", body);\n        }\n        catch (error) {\n            throw new Error(`Failed to query smart contract: ${error.message}`);\n        }\n    }\n}\nexports.ContractService = ContractService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractService = void 0;\nvar ContractService_1 = require(\"./ContractService\");\nObject.defineProperty(exports, \"ContractService\", { enumerable: true, get: function () { return ContractService_1.ContractService; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst provider_1 = require(\"./provider\");\nconst chain_1 = require(\"./chain\");\nconst transaction_1 = require(\"./transaction\");\nconst identity_1 = require(\"./identity\");\nconst contract_1 = require(\"./contract\");\nconst utils_1 = require(\"./utils\");\nconst qx_1 = require(\"./qx\");\nclass QubicCore {\n    constructor(options) {\n        this.utils = utils_1.UtilityService;\n        this.provider = new provider_1.QubicProvider(options);\n        this.chain = new chain_1.ChainService(this.provider);\n        this.identity = new identity_1.IdentityService(this.provider);\n        this.transaction = new transaction_1.TransactionService(this.provider);\n        this.contract = (address) => new contract_1.ContractService(this.provider, address);\n        this.qx = new qx_1.QxService(this.provider);\n    }\n}\nexports.default = QubicCore;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CHECKSUM_LENGTH = exports.NONCE_LENGTH = exports.DIGEST_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.PRIVATE_KEY_LENGTH = exports.SIGNATURE_LENGTH = exports.KECCAK_STATE_LENGTH = void 0;\nconst libFourQ_K12_js_1 = __importDefault(require(\"./libFourQ_K12.js\"));\nconst keccakp_js_1 = require(\"./keccakp.js\");\nconst allocU8 = function (l, v) {\n    let ptr = libFourQ_K12_js_1.default._malloc(l);\n    let chunk = libFourQ_K12_js_1.default.HEAPU8.subarray(ptr, ptr + l);\n    if (v) {\n        chunk.set(v);\n    }\n    return chunk;\n};\nconst allocU16 = function (l, v) {\n    let ptr = libFourQ_K12_js_1.default._malloc(l);\n    let chunk = libFourQ_K12_js_1.default.HEAPU16.subarray(ptr, ptr + l);\n    chunk.set(v);\n    return chunk;\n};\n/**\n * @namespace Crypto\n */\n/**\n * A promise which always resolves to object with crypto functions.\n *\n * @constant {Promise<Crypto>}\n * @memberof module:qubic\n */\nconst crypto = new Promise(function (resolve) {\n    libFourQ_K12_js_1.default.onRuntimeInitialized = function () {\n        /**\n         * @memberof Crypto.schnorrq\n         * @param {Uint8Array} secretKey\n         * @returns {Uint8Array}\n         */\n        const generatePublicKey = function (secretKey) {\n            const sk = allocU8(secretKey.length, secretKey);\n            const pk = allocU8(32);\n            const free = function () {\n                libFourQ_K12_js_1.default._free(sk.byteOffset);\n                libFourQ_K12_js_1.default._free(pk.byteOffset);\n            };\n            libFourQ_K12_js_1.default._SchnorrQ_KeyGeneration(sk.byteOffset, pk.byteOffset);\n            const key = pk.slice();\n            free();\n            return key;\n        };\n        /**\n         * @memberof Crypto.schnorrq\n         * @param {Uint8Array} secretKey\n         * @param {Uint8Array} publicKey\n         * @param {Uint8Array} message\n         * @returns {Uint8Array}\n         */\n        const sign = function (secretKey, publicKey, message) {\n            const sk = allocU8(secretKey.length, secretKey);\n            const pk = allocU8(publicKey.length, publicKey);\n            const m = allocU8(message.length, message);\n            const s = allocU8(64);\n            const free = function () {\n                libFourQ_K12_js_1.default._free(sk.byteOffset);\n                libFourQ_K12_js_1.default._free(pk.byteOffset);\n                libFourQ_K12_js_1.default._free(m.byteOffset);\n                libFourQ_K12_js_1.default._free(s.byteOffset);\n            };\n            libFourQ_K12_js_1.default._SchnorrQ_Sign(sk.byteOffset, pk.byteOffset, m.byteOffset, message.length, s.byteOffset);\n            const sig = s.slice();\n            free();\n            return sig;\n        };\n        /**\n         * @memberof Crypto.schnorrq\n         * @param {Uint8Array} publicKey\n         * @param {Uint8Array} message\n         * @param {Uint8Array} signature\n         * @returns {number} 1 if valid, 0 if invalid\n         */\n        const verify = function (publicKey, message, signature) {\n            const pk = allocU8(publicKey.length, publicKey);\n            const m = allocU8(message.length, message);\n            const s = allocU8(signature.length, signature);\n            const v = allocU16(1, new Uint16Array(1));\n            const free = function () {\n                libFourQ_K12_js_1.default._free(pk.byteOffset);\n                libFourQ_K12_js_1.default._free(m.byteOffset);\n                libFourQ_K12_js_1.default._free(s.byteOffset);\n                libFourQ_K12_js_1.default._free(v.byteOffset);\n            };\n            libFourQ_K12_js_1.default._SchnorrQ_Verify(pk.byteOffset, m.byteOffset, message.length, s.byteOffset, v.byteOffset);\n            const ver = v[0];\n            free();\n            return ver;\n        };\n        /**\n         * @memberof Crypto.kex\n         * @param {Uint8Array} secretKey\n         * @returns {Uint8Array} Public key\n         */\n        const generateCompressedPublicKey = function (secretKey) {\n            const sk = allocU8(secretKey.length, secretKey);\n            const pk = allocU8(32);\n            const free = function () {\n                libFourQ_K12_js_1.default._free(sk.byteOffset);\n                libFourQ_K12_js_1.default._free(pk.byteOffset);\n            };\n            libFourQ_K12_js_1.default._CompressedPublicKeyGeneration(sk.byteOffset, pk.byteOffset);\n            const key = pk.slice();\n            free();\n            return key;\n        };\n        /**\n         * @memberof Crypto.kex\n         * @param {Uint8Array} secretKey\n         * @param {Uint8Array} publicKey\n         * @returns {Uint8Array} Shared key\n         */\n        const compressedSecretAgreement = function (secretKey, publicKey) {\n            const sk = allocU8(secretKey.length, secretKey);\n            const pk = allocU8(publicKey.length, publicKey);\n            const shk = allocU8(32);\n            const free = function () {\n                libFourQ_K12_js_1.default._free(sk.byteOffset);\n                libFourQ_K12_js_1.default._free(pk.byteOffset);\n                libFourQ_K12_js_1.default._free(shk.byteOffset);\n            };\n            libFourQ_K12_js_1.default._CompressedSecretAgreement(sk.byteOffset, pk.byteOffset, shk.byteOffset);\n            const key = shk.slice();\n            free();\n            return key;\n        };\n        /**\n         * @memberof Crypto\n         * @param {Uint8Array} input\n         * @param {Uint8Array} output\n         * @param {number} outputLength\n         * @param {number} outputOffset\n         */\n        const K12 = function (input, output, outputLength, outputOffset = 0) {\n            const i = allocU8(input.length, input);\n            const o = allocU8(outputLength, new Uint8Array(outputLength));\n            const free = function () {\n                libFourQ_K12_js_1.default._free(i.byteOffset);\n                libFourQ_K12_js_1.default._free(o.byteOffset);\n            };\n            libFourQ_K12_js_1.default._KangarooTwelve(i.byteOffset, input.length, o.byteOffset, outputLength, 0, 0);\n            output.set(o.slice(), outputOffset);\n            free();\n        };\n        resolve({\n            /**\n             * @namespace Crypto.schnorrq\n             */\n            schnorrq: {\n                generatePublicKey,\n                sign,\n                verify,\n            },\n            /**\n             * @namespace Crypto.kex\n             */\n            kex: {\n                generateCompressedPublicKey,\n                compressedSecretAgreement,\n            },\n            K12,\n            keccakP160012: keccakp_js_1.keccakP160012,\n            KECCAK_STATE_LENGTH: 200,\n        });\n    };\n});\ncrypto.keccakP160012 = keccakp_js_1.keccakP160012;\nexports.KECCAK_STATE_LENGTH = 200;\nexports.SIGNATURE_LENGTH = 64;\nexports.PRIVATE_KEY_LENGTH = 32;\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.DIGEST_LENGTH = 32;\nexports.NONCE_LENGTH = 32;\nexports.CHECKSUM_LENGTH = 3;\nexports.default = crypto;\n","\"use strict\";\n// Source: https://github.com/paulmillr/noble-hashes/blob/299905c98bdf1a197023198c8fe678923483896d/src/sha3.ts\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keccakP160012 = void 0;\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2022 Paul Miller (https://paulmillr.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return {\n        h: Number((n >> _32n) & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0,\n    };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\nconst rotlH = (h, l, s) => (s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s));\nfunction keccakP160012(s1) {\n    const s = new Uint32Array(s1.buffer);\n    const rounds = 12;\n    const B = new Uint32Array(5 * 2);\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP160012 = keccakP160012;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentityService = void 0;\nconst crypto_1 = __importDefault(require(\"../crypto\"));\nconst base_1 = require(\"../base\");\nclass IdentityService extends base_1.QubicBase {\n    constructor(provider) {\n        super(provider);\n    }\n    /**\n     * Retrieves the list of assets owned by a specific identity.\n     *\n     * @param {string} identity - The identity for which to fetch owned assets.\n     * @returns {Promise<IGetOwnedAssets>} A promise that resolves to the list of owned assets.\n     */\n    async getOwnedAssets(identity) {\n        try {\n            return await this.httpClient.call(`/${this.version}/assets/${identity}/owned`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch owned assets for identity ${identity}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the list of assets possessed by a specific identity.\n     *\n     * @param {string} identity - The identity for which to fetch possessed assets.\n     * @returns {Promise<IGetPossessedAssets>} A promise that resolves to the list of possessed assets.\n     */\n    async getPossessedAssets(identity) {\n        try {\n            return await this.httpClient.call(`/${this.version}/assets/${identity}/possessed`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch possessed assets for identity ${identity}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the list of assets issued by a specific identity.\n     *\n     * @param {string} identity - The identity for which to fetch issued assets.\n     * @returns {Promise<IGetIssuedAssets>} A promise that resolves to the list of issued assets.\n     */\n    async getIssuedAssets(identity) {\n        try {\n            return await this.httpClient.call(`/${this.version}/assets/${identity}/issued`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch issued assets for identity ${identity}: ${error.message}`);\n        }\n    }\n    /**\n     * Fetches the balance of a specific address ID.\n     *\n     * @param {string} addressID The address ID for which to fetch the balance.\n     * @returns {Promise<any>} A promise that resolves to the balance.\n     */\n    async getBalanceByAddress(addressID) {\n        try {\n            return await this.httpClient.call(`/${this.version}/balances/${addressID}`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch balance for address ID ${addressID}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the balance of a specific identity.\n     *\n     * @param {string} Id The identity for which to fetch the balance.\n     * @returns {Promise<IGetBalanceByIdentity>} A promise that resolves to the balance.\n     */\n    async getBalanceByIdentity(Id) {\n        try {\n            return await this.httpClient.call(`/${this.version}/balances/${Id}`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch balance for identity ${Id}: ${error.message}`);\n        }\n    }\n    /**\n     * Creates a new identity package containing a public key, private key, and public identity string.\n     * The identity package is generated from a seed string using the K12 hash function.\n     *\n     * @param {string} seed - The seed string used to generate the identity.\n     * @returns {Promise<{ publicKey: Uint8Array, privateKey: Uint8Array, publicId: string }>} identity - The generated identity package.\n     */\n    async createIdentity(seed) {\n        const identity = await this.createIdPackage(seed);\n        return identity;\n    }\n    /**\n     * Loads an identity package from a private key byte array.\n     * The identity package contains a public key, private key, and public identity string.\n     *\n     * @param {Uint8Array} privateKey - The private key as a byte array.\n     * @returns {Promise<{ publicKey: Uint8Array, privateKey: Uint8Array, publicId: string }>} identity - The generated identity package.\n     */\n    async loadIdentityFromPrivateKey(privateKey) {\n        const { schnorrq } = await crypto_1.default;\n        // Derive the public key from the private key\n        const publicKey = schnorrq.generatePublicKey(privateKey);\n        // Compute the public identity from the public key\n        const publicId = await this.getIdentity(publicKey);\n        return { publicKey, privateKey, publicId };\n    }\n    /**\n     * Verifies whether an identity string is valid by checking its length,\n     * ensuring it contains only uppercase letters, and comparing it with\n     * the derived identity from its public key.\n     *\n     * @param {string} identity - The identity string to verify.\n     * @returns {Promise<boolean>} - Returns `true` if the identity is valid, otherwise `false`.\n     */\n    async verifyIdentity(identity) {\n        if (!identity || identity.length !== 60 || !/^[A-Z]+$/.test(identity)) {\n            return false;\n        }\n        // Convert the identity string into its public key bytes\n        const publicKey = this.getIdentityBytes(identity);\n        // Derive the identity from the public key\n        const idFromBytes = await this.getIdentity(publicKey);\n        // Compare the original identity with the derived one\n        return identity === idFromBytes;\n    }\n}\nexports.IdentityService = IdentityService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentityService = void 0;\nvar IdentityService_1 = require(\"./IdentityService\");\nObject.defineProperty(exports, \"IdentityService\", { enumerable: true, get: function () { return IdentityService_1.IdentityService; } });\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __importDefault(require(\"./core\"));\nconst Qubic = core_1.default;\nexports.default = Qubic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QubicProvider = void 0;\nclass QubicProvider {\n    constructor(providerOptions) {\n        this.options = providerOptions;\n    }\n    getProviderOptions() {\n        return this.options;\n    }\n}\nexports.QubicProvider = QubicProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QxService = void 0;\nconst base_1 = require(\"../base\");\nclass QxService extends base_1.QubicBase {\n    constructor(provider) {\n        super(provider);\n    }\n    /**\n     * Retrieves ask orders for a specific asset and issuer.\n     *\n     * @param {string} assetName - The name of the asset.\n     * @param {string} issuerId - The issuer's ID.\n     * @param {string} offset - The offset for pagination.\n     * @returns {Promise<IQxAssetAskOrders>} A promise that resolves to asset ask orders.\n     */\n    async getAskOrders(assetName, issuerId, offset) {\n        const url = `/${this.version}/qx/getAskOrders?assetName=${encodeURIComponent(assetName)}&issuerId=${encodeURIComponent(issuerId)}&offset=${BigInt(offset).toString()}`;\n        try {\n            const response = await this.httpClient.call(url, \"GET\");\n            return response;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch ask orders for asset ${assetName} and issuer ${issuerId}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves bid orders for a specific asset and issuer.\n     *\n     * @param {string} assetName - The name of the asset.\n     * @param {string} issuerId - The issuer's ID.\n     * @param {string} offset - The offset for pagination.\n     * @returns {Promise<IQxAssetBidOrders>} A promise that resolves to asset bid orders.\n     */\n    async getAssetBidOrders(assetName, issuerId, offset) {\n        const url = `/${this.version}/qx/getAssetBidOrders?assetName=${encodeURIComponent(assetName)}&issuerId=${encodeURIComponent(issuerId)}&offset=${BigInt(offset).toString()}`;\n        try {\n            const response = await this.httpClient.call(url, \"GET\");\n            return response;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch bid orders for asset ${assetName} and issuer ${issuerId}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves ask orders for a specific entity.\n     *\n     * @param {string} entityId - The entity's ID.\n     * @param {string} offset - The offset for pagination.\n     * @returns {Promise<IQxEntityAskOrders>} A promise that resolves to entity ask orders.\n     */\n    async getEntityAskOrders(entityId, offset) {\n        const url = `/${this.version}/qx/getEntityAskOrders?entityId=${encodeURIComponent(entityId)}&offset=${BigInt(offset).toString()}`;\n        try {\n            const response = await this.httpClient.call(url, \"GET\");\n            return response;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch ask orders for entity ${entityId}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves bid orders for a specific entity.\n     *\n     * @param {string} entityId - The entity's ID.\n     * @param {string} offset - The offset for pagination.\n     * @returns {Promise<IQxEntityBidOrders>} A promise that resolves to entity bid orders.\n     */\n    async getEntityBidOrders(entityId, offset) {\n        const url = `/${this.version}/qx/getEntityBidOrders?entityId=${encodeURIComponent(entityId)}&offset=${BigInt(offset).toString()}`;\n        try {\n            const response = await this.httpClient.call(url, \"GET\");\n            return response;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch bid orders for entity ${entityId}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the fees associated with Qx transactions.\n     *\n     * @returns {Promise<IQxFees>} A promise that resolves to the Qx fees.\n     */\n    async getFees() {\n        const url = `/${this.version}/qx/getFees`;\n        try {\n            const response = await this.httpClient.call(url, \"GET\");\n            return response;\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch Qx fees: ${error.message}`);\n        }\n    }\n}\nexports.QxService = QxService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QxService = void 0;\nvar QxService_1 = require(\"./QxService\");\nObject.defineProperty(exports, \"QxService\", { enumerable: true, get: function () { return QxService_1.QxService; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nconst constants_1 = require(\"../constants\");\nclass Transaction {\n    constructor() {\n        this.tick = 0;\n        this.inputSize = 0;\n        this.inputType = 0;\n        this.offset = 0;\n        this.data = new Uint8Array(0);\n        this.sourceKey = new Uint8Array(0);\n        this.destinationKey = new Uint8Array(0);\n        this.amount = new Uint8Array(0);\n        this.builtData = new Uint8Array(0);\n        this.digest = new Uint8Array(0);\n        this.payload = new Uint8Array(0);\n        this.signature = new Uint8Array(constants_1.QubicConstants.SIGNATURE_LENGTH).fill(0);\n    }\n    setSourceBytes(sourceBytes) {\n        this.sourceKey = sourceBytes;\n        return this;\n    }\n    setDestinationBytes(destinationKey) {\n        this.destinationKey = destinationKey;\n        return this;\n    }\n    setAmount(amount) {\n        let amountUint8Array;\n        if (amount instanceof Uint8Array) {\n            amountUint8Array = amount;\n        }\n        else if (typeof amount === \"number\") {\n            amountUint8Array = this.getPackageData(BigInt(amount));\n        }\n        else {\n            amountUint8Array = this.getPackageData(amount);\n        }\n        this.amount = amountUint8Array;\n        return this;\n    }\n    setTick(tick) {\n        this.tick = tick;\n        return this;\n    }\n    setInputSize(inputSize) {\n        this.inputSize = inputSize;\n        return this;\n    }\n    setPayload(payload) {\n        //TODO: learn how to parse ITransactionPayload to Uint8Array\n        this.payload = new Uint8Array(constants_1.QubicConstants.MAX_TRANSACTION_SIZE).fill(0);\n        return this;\n    }\n    setInputType(inputType) {\n        this.inputType = inputType;\n        return this;\n    }\n    getData() {\n        return this.data;\n    }\n    getOffset() {\n        return this.offset;\n    }\n    setBuiltData(builtData) {\n        this.builtData = builtData;\n        return this;\n    }\n    getBuiltData() {\n        return this.builtData;\n    }\n    setDigest(digest) {\n        this.digest = digest;\n    }\n    getDigest() {\n        return this.digest;\n    }\n    setSignature(signature) {\n        this.signature = signature;\n    }\n    getSignature() {\n        return this.signature;\n    }\n    build() {\n        this.setMaxDataSize();\n        this.addRaw(this.sourceKey);\n        this.addRaw(this.destinationKey);\n        this.addRaw(this.amount);\n        this.addInt(this.tick);\n        this.addShort(this.inputType);\n        this.addShort(this.inputSize);\n        this.addRaw(this.payload);\n        return this;\n    }\n    setMaxDataSize() {\n        const total = this.sourceKey.length +\n            this.destinationKey.length +\n            this.amount.length +\n            4 + // tick\n            2 + // inputType\n            2 + // inputSize\n            this.inputSize +\n            this.signature.length;\n        this.data = new Uint8Array(total);\n    }\n    addRaw(q) {\n        this.data.set(q, this.offset);\n        this.offset += q.length;\n        return this;\n    }\n    getPackageData(value) {\n        let buffer = new ArrayBuffer(8);\n        let dataview = new DataView(buffer);\n        dataview.setBigInt64(0, value, true);\n        return new Uint8Array(buffer);\n    }\n    addShort(q /* must be a short */) {\n        this.data.set(this.FromShort(q), this.offset);\n        this.offset += 2;\n        return this;\n    }\n    addInt(q /* must be a short */) {\n        this.data.set(this.FromInt(q), this.offset);\n        this.offset += 4;\n        return this;\n    }\n    FromInt(num) {\n        // If num is a 32-bit integer\n        let buffer = new ArrayBuffer(4); // 4 bytes for a 32-bit integer\n        let dataview = new DataView(buffer);\n        dataview.setInt32(0, num, true); // Use setUint32 if you are dealing with unsigned integers\n        return new Uint8Array(buffer);\n    }\n    FromShort(num) {\n        // If num is a 32-bit integer\n        let buffer = new ArrayBuffer(2); // 4 bytes for a 32-bit integer\n        let dataview = new DataView(buffer);\n        dataview.setInt16(0, num, true); // Use setUint32 if you are dealing with unsigned integers\n        return new Uint8Array(buffer);\n    }\n}\nexports.Transaction = Transaction;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionService = void 0;\nconst base_1 = require(\"../base\");\nconst constants_1 = require(\"../constants\");\nconst crypto_1 = __importDefault(require(\"../crypto\"));\nconst TransactionBuilder_1 = require(\"./TransactionBuilder\");\nclass TransactionService extends base_1.QubicBase {\n    constructor(provider) {\n        super(provider);\n    }\n    /**\n     * Retrieves a list of approved transactions for the given tick.\n     *\n     * @param {number} tickNumber - The tick number for which to fetch approved transactions.\n     * @returns {Promise<IGetApproveTransactions>} A promise that resolves to the list of approved transactions.\n     */\n    async getApprovedTransactions(tickNumber) {\n        try {\n            return await this.httpClient.call(`/${this.version}/ticks/${tickNumber}/approved-transactions`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch approved transactions for tick number ${tickNumber}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves the status of a specific transaction.\n     *\n     * @param {number} txId - The transaction ID for which to fetch the status.\n     * @returns {Promise<IGetTransactionsStatus>} A promise that resolves to the transaction status.\n     */\n    async getTransactionsStatus(txId) {\n        try {\n            return await this.httpClient.call(`/${this.version}/tx-status/${txId}`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch transaction status for transaction ID ${txId}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves details of a specific transaction.\n     *\n     * @param {number} txId - The transaction ID for which to fetch transaction details.\n     * @returns {Promise<IGetTransaction>} A promise that resolves to the transaction details.\n     */\n    async getTransactions(txId) {\n        try {\n            return await this.httpClient.call(`/${this.version}/transactions/${txId}`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch transaction details for transaction ID ${txId}: ${error.message}`);\n        }\n    }\n    /**\n     * Retrieves transfer transactions for a specific identity within a tick range.\n     *\n     * @param {number} identity - The identity for which to fetch transfer transactions.\n     * @returns {Promise<IGetTransferTransaction>} A promise that resolves to the list of transfer transactions.\n     */\n    async getTransferTransactions(identity) {\n        try {\n            return await this.httpClient.call(`/${this.version}/identities/${identity}/transfer-transactions`, \"GET\");\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch transfer transactions for identity ${identity}: ${error.message}`);\n        }\n    }\n    /**\n     * Creates a transaction.\n     *\n     * @param {string} from - The source wallet address.\n     * @param {string} to - The destination wallet address.\n     * @param {number} amount - The amount to transfer.\n     * @param {number} tick - The tick number.\n     * @returns {Promise<Transaction>} - The transaction builder.\n     */\n    async createTransaction(from, to, amount, tick) {\n        const tb = new TransactionBuilder_1.Transaction()\n            .setSourceBytes(this.getIdentityBytes(from))\n            .setDestinationBytes(this.getIdentityBytes(to))\n            .setAmount(amount)\n            .setTick(tick)\n            .build();\n        return tb;\n    }\n    /**\n     * Encodes a transaction to a base64 string.\n     *\n     * @param {Uint8Array} transaction - The transaction to encode.\n     * @returns {string} - The encoded transaction as a base64 string.\n     */\n    encodeTransactionToBase64(transaction) {\n        const byteArray = new Uint8Array(transaction);\n        const str = String.fromCharCode.apply(null, Array.from(byteArray));\n        return btoa(str);\n    }\n    /**\n     * Signs a transaction using a private key and returns the signed transaction.\n     *\n     * @param {Uint8Array} transaction - The transaction to sign.\n     * @param {Uint8Array} privateKey - The private key used to sign the transaction.\n     * @returns {Promise<Uint8Array>} - The signed transaction as a byte array.\n     */\n    async signTransaction(transaction, privateKey) {\n        // Import the necessary cryptographic functions\n        const { schnorrq, K12 } = await crypto_1.default;\n        // Generate a cryptographic digest of the transaction\n        const digest = new Uint8Array(constants_1.QubicConstants.DIGEST_LENGTH);\n        // Generate the public key from the private key\n        const publicKey = schnorrq.generatePublicKey(privateKey);\n        // Get the transaction data and offset\n        let data = transaction.getData();\n        let offset = transaction.getOffset();\n        // Create a copy of the transaction data to sign\n        const toSign = data.slice(0, offset);\n        // Sign the transaction using the private key and the digest\n        K12(toSign, digest, constants_1.QubicConstants.DIGEST_LENGTH);\n        // Sign the transaction using the SchnorrQ signature scheme\n        const signature = schnorrq.sign(privateKey, publicKey, digest);\n        // Append the signature to the transaction data\n        data.set(signature, offset);\n        // Generate a cryptographic digest of the signed transaction\n        offset += constants_1.QubicConstants.SIGNATURE_LENGTH;\n        // Compute the digest of the signed transaction\n        const signedTransaction = data.slice(0, offset);\n        // Return the signed transaction\n        return signedTransaction;\n    }\n    /**\n     * Broadcast a transaction.\n     *\n     * @param {string} encodedTransaction The encoded transaction to be broadcast.\n     * @returns {Promise<IBroadcastTransactionResponse>} A promise that resolves to the broadcast transaction response.\n     */\n    async broadcastTransaction(encodedTransaction) {\n        try {\n            return await this.httpClient.call(`/${this.version}/broadcast-transaction`, \"POST\", { encodedTransaction });\n        }\n        catch (error) {\n            throw new Error(`Failed to broadcast transaction: ${error.message}`);\n        }\n    }\n}\nexports.TransactionService = TransactionService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionService = void 0;\nvar TransactionService_1 = require(\"./TransactionService\");\nObject.defineProperty(exports, \"TransactionService\", { enumerable: true, get: function () { return TransactionService_1.TransactionService; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UtilityService = void 0;\nconst constants_1 = require(\"../constants\");\nclass UtilityService {\n    /**\n     * Create a secure 55-character lowercase seed.\n     *\n     * @returns {string} The securely generated seed.\n     */\n    static createSeed() {\n        const length = 55;\n        const alphabet = constants_1.QubicConstants.SEED_ALPHABET;\n        const alphabetLength = alphabet.length;\n        let seed = \"\";\n        for (let i = 0; i < length; i++) {\n            seed += alphabet[Math.floor(Math.random() * alphabetLength)];\n        }\n        return seed;\n    }\n    /**\n     * Convert a byte array to a shifted hexadecimal representation.\n     *\n     * @param {Uint8Array} bytes - The byte array to convert.\n     * @returns {string} The shifted hexadecimal string representation.\n     */\n    static bytesToShiftedHex(bytes) {\n        const SHIFTED_HEX_CHARS = \"abcdefghijklmnop\";\n        let hex = \"\";\n        for (let i = 0; i < bytes.length; i++) {\n            hex +=\n                SHIFTED_HEX_CHARS[bytes[i] >> 4] + SHIFTED_HEX_CHARS[bytes[i] & 15];\n        }\n        return hex.toUpperCase();\n    }\n    /**\n     * Convert a public key string to a byte array.\n     *\n     * @param {string} s - The public key string.\n     * @returns {Uint8Array} The byte array representation of the public key.\n     */\n    static publicKeyStringToBytes(s) {\n        const publicKeyBytes = new Uint8Array(32);\n        const view = new DataView(publicKeyBytes.buffer, 0);\n        for (let i = 0; i < 4; i++) {\n            view.setBigUint64(i * 8, 0n, true);\n            for (let j = 14; j-- > 0;) {\n                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) * 26n +\n                    BigInt(s.charCodeAt(i * 14 + j) - \"A\".charCodeAt(0)), true);\n            }\n        }\n        return publicKeyBytes;\n    }\n    /**\n     * Convert a 32-byte array to a string representation.\n     *\n     * @param {Uint8Array} bytes - The byte array to convert.\n     * @returns {string} The string representation.\n     */\n    static bytes32ToString(bytes) {\n        const hex = this.bytesToShiftedHex(bytes);\n        const buffer = new Uint8Array(32);\n        const view = new DataView(buffer.buffer, 0);\n        let s = \"\";\n        for (let i = 0; i < bytes.length; i++) {\n            view.setUint8(i, ((hex.charCodeAt(i << 1) - \"A\".charCodeAt(0)) << 4) |\n                (hex.charCodeAt((i << 1) + 1) - \"A\".charCodeAt(0)));\n        }\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 14; j++) {\n                s += String.fromCharCode(Number((view.getBigUint64(i * 8, true) % 26n) + BigInt(\"A\".charCodeAt(0))));\n                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) / 26n, true);\n            }\n        }\n        return s.toLowerCase();\n    }\n    /**\n     * Convert a digest byte array to a string representation.\n     *\n     * @param {Uint8Array} bytes - The byte array to convert.\n     * @returns {string} The string representation of the digest.\n     */\n    static digestBytesToString(bytes) {\n        return this.bytes32ToString(bytes);\n    }\n    /**\n     * Convert a public key byte array to a string representation.\n     *\n     * @param {Uint8Array} bytes - The byte array of the public key.\n     * @returns {string} The string representation of the public key.\n     */\n    static publicKeyBytesToString(bytes) {\n        if (bytes.length === 32) {\n            return this.bytes32ToString(bytes).toUpperCase();\n        }\n        const hex = this.bytesToShiftedHex(bytes);\n        const buffer = new Uint8Array(40);\n        const view = new DataView(buffer.buffer, 0);\n        let s = \"\";\n        for (let i = 0; i < bytes.length; i++) {\n            view.setUint8(i, ((hex.charCodeAt(i << 1) - \"A\".charCodeAt(0)) << 4) |\n                (hex.charCodeAt((i << 1) + 1) - \"A\".charCodeAt(0)));\n        }\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 14; j++) {\n                s += String.fromCharCode(Number((view.getBigUint64(i * 8, true) % 26n) + BigInt(\"A\".charCodeAt(0))));\n                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) / 26n, true);\n            }\n        }\n        view.setBigUint64(32, view.getBigUint64(32, true) & 0x3ffffn, true);\n        for (let i = 0; i < 4; i++) {\n            s += String.fromCharCode(Number((view.getBigUint64(32, true) % 26n) + BigInt(\"A\".charCodeAt(0))));\n            view.setBigUint64(32, view.getBigUint64(32, true) / 26n, true);\n        }\n        return s.toUpperCase();\n    }\n    /**\n     * Convert a seed string into a byte array.\n     *\n     * @param {string} seed - The seed string.\n     * @returns {Uint8Array} The byte array representation of the seed.\n     */\n    static seedStringToBytes(seed) {\n        const ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n        const bytes = new Uint8Array(seed.length);\n        for (let i = 0; i < seed.length; i++) {\n            bytes[i] = ALPHABET.indexOf(seed[i]);\n        }\n        return bytes;\n    }\n    /**\n     * Convert a hexadecimal string to a base26 string.\n     *\n     * @param {Uint8Array} hex - The hexadecimal string to convert.\n     * @returns {string} The base26 string representation.\n     */\n    static hexToBase26(hex) {\n        const ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n        let n = BigInt(hex);\n        const base26Array = [];\n        const base = BigInt(ALPHABET.length);\n        while (n > 0) {\n            base26Array.push(ALPHABET[Number(n % base)]);\n            n /= base;\n        }\n        return base26Array.reverse().join(\"\");\n    }\n    /**\n     * Convert a base26 string to a hexadecimal string.\n     *\n     * @param {string} base26 - The base26 string to convert.\n     * @returns {string} The hexadecimal string representation.\n     */\n    static base26ToHex(base26) {\n        const ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n        const alphabetMap = new Map(ALPHABET.split(\"\").map((char, i) => [char, BigInt(i)]));\n        let num = BigInt(0);\n        const base = BigInt(26);\n        for (const char of base26) {\n            num = num * base + alphabetMap.get(char);\n        }\n        return \"0x\" + num.toString(16);\n    }\n}\nexports.UtilityService = UtilityService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UtilityService = void 0;\nvar UtilityService_1 = require(\"./UtilityService\");\nObject.defineProperty(exports, \"UtilityService\", { enumerable: true, get: function () { return UtilityService_1.UtilityService; } });\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","import styled from 'styled-components';\n import Qubic from '@ardata-tech/qubic-js';\n\nimport {\n  ConnectButton,\n  InstallFlaskButton,\n  ReconnectButton,\n  SendHelloButton,\n  Card,\n} from '../components';\nimport { defaultSnapOrigin } from '../config';\nimport {\n  useMetaMask,\n  useInvokeSnap,\n  useMetaMaskContext,\n  useRequestSnap,\n} from '../hooks';\nimport { isLocalSnap, shouldDisplayReconnectButton } from '../utils';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 1;\n  margin-top: 7.6rem;\n  margin-bottom: 7.6rem;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding-left: 2.4rem;\n    padding-right: 2.4rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    width: auto;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin-top: 0;\n  margin-bottom: 2.4rem;\n  text-align: center;\n`;\n\nconst Span = styled.span`\n  color: ${(props) => props.theme.colors.primary?.default};\n`;\n\nconst Subtitle = styled.p`\n  font-size: ${({ theme }) => theme.fontSizes.large};\n  font-weight: 500;\n  margin-top: 0;\n  margin-bottom: 0;\n  ${({ theme }) => theme.mediaQueries.small} {\n    font-size: ${({ theme }) => theme.fontSizes.text};\n  }\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  max-width: 64.8rem;\n  width: 100%;\n  height: 100%;\n  margin-top: 1.5rem;\n`;\n\nconst Notice = styled.div`\n  background-color: ${({ theme }) => theme.colors.background?.alternative};\n  border: 1px solid ${({ theme }) => theme.colors.border?.default};\n  color: ${({ theme }) => theme.colors.text?.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n\n  & > * {\n    margin: 0;\n  }\n  ${({ theme }) => theme.mediaQueries.small} {\n    margin-top: 1.2rem;\n    padding: 1.6rem;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${({ theme }) => theme.colors.error?.muted};\n  border: 1px solid ${({ theme }) => theme.colors.error?.default};\n  color: ${({ theme }) => theme.colors.error?.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-bottom: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding: 1.6rem;\n    margin-bottom: 1.2rem;\n    margin-top: 1.2rem;\n    max-width: 100%;\n  }\n`;\n\nconst Index = () => {\n  const { error } = useMetaMaskContext();\n  const { isFlask, snapsDetected, installedSnap } = useMetaMask();\n  const requestSnap = useRequestSnap();\n  const invokeSnap = useInvokeSnap();\n\n   const qubic = new Qubic({\n     providerUrl: 'https://rpc.qubic.org',\n     version: 1,\n   });\n\n  const isMetaMaskReady = isLocalSnap(defaultSnapOrigin)\n    ? isFlask\n    : snapsDetected;\n\n  const handleSendHelloClick = async () => {\n    await invokeSnap({ method: 'hello' });\n  };\n\n   const handleSendHiClick = async () => {\n     const privateKey: any = await invokeSnap({ method: 'getPublicId' });\n     console.log('handleSendHiClick', privateKey);\n\n      const privateKeyBase26 = qubic.utils.hexToBase26(privateKey);\n      console.log('handleSendHiClick privateKeyBase26', privateKeyBase26);\n\n    //  const identity = await qubic.identity.createIdentity(privateKeyBase26);\n\n    //  console.log('identity', {\n    //    publicKey: identity.publicKey,\n    //    privateKey: identity.privateKey,\n    //    publicId: identity.publicId,\n    //  });\n   };\n  \n  async function getCurrentAccount() {\n    try {\n      const accounts: any = await window.ethereum.request({\n      method: 'eth_accounts',\n      });\n      \n      console.log('accounts', accounts);\n      if (accounts.length > 0) {\n        const currentAccount = accounts[0];\n        console.log('Current account:', currentAccount);\n        return currentAccount;\n      } else {\n        console.log('No accounts are connected');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching accounts:', error);\n      return null;\n    }\n  }\n\n  return (\n    <Container>\n      <Heading>\n        Welcome to <Span>template-snap</Span>\n      </Heading>\n      <Subtitle>\n        Get started by editing <code>src/index.tsx</code>\n      </Subtitle>\n      <CardContainer>\n        {error && (\n          <ErrorMessage>\n            <b>An error happened:</b> {error.message}\n          </ErrorMessage>\n        )}\n        {!isMetaMaskReady && (\n          <Card\n            content={{\n              title: 'Install',\n              description:\n                'Snaps is pre-release software only available in MetaMask Flask, a canary distribution for developers with access to upcoming features.',\n              button: <InstallFlaskButton />,\n            }}\n            fullWidth\n          />\n        )}\n        {!installedSnap && (\n          <Card\n            content={{\n              title: 'Connect',\n              description:\n                'Get started by connecting to and installing the example snap.',\n              button: (\n                <ConnectButton\n                  onClick={requestSnap}\n                  disabled={!isMetaMaskReady}\n                />\n              ),\n            }}\n            disabled={!isMetaMaskReady}\n          />\n        )}\n        {shouldDisplayReconnectButton(installedSnap) && (\n          <Card\n            content={{\n              title: 'Reconnect',\n              description:\n                'While connected to a local running snap this button will always be displayed in order to update the snap if a change is made.',\n              button: (\n                <ReconnectButton\n                  onClick={requestSnap}\n                  disabled={!installedSnap}\n                />\n              ),\n            }}\n            disabled={!installedSnap}\n          />\n        )}\n        <Card\n          content={{\n            title: 'Send Hello message',\n            description:\n              'Display a custom message within a confirmation screen in MetaMask.',\n            button: (\n              <SendHelloButton\n                onClick={handleSendHelloClick}\n                disabled={!installedSnap}\n              />\n            ),\n          }}\n          disabled={!installedSnap}\n          fullWidth={\n            isMetaMaskReady &&\n            Boolean(installedSnap) &&\n            !shouldDisplayReconnectButton(installedSnap)\n          }\n        />\n        <Notice>\n          <p>\n            Please note that the <b>snap.manifest.json</b> and{' '}\n            <b>package.json</b> must be located in the server root directory and\n            the bundle must be hosted at the location specified by the location\n            field.\n          </p>\n        </Notice>\n      </CardContainer>\n\n      <button onClick={handleSendHiClick}>HI BUTTON</button>\n    </Container>\n  );\n};\n\nexport default Index;\n"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","QubicBase","http_1","constants_1","crypto_1","bignumber_js_1","constructor","provider","providerOptions","getProviderOptions","version","httpClient","HttpClient","providerUrl","getIdentity","publicKey","lowerCase","newId","i","longNumber","default","decimalPlaces","slice","forEach","val","index","plus","toString","j","String","fromCharCode","charCodeAt","toNumber","div","checksum","getCheckSum","identityBytesChecksum","getIdentityBytes","identity","publicKeyBytes","Uint8Array","view","DataView","buffer","setBigUint64","getBigUint64","BigInt","createIdPackage","seed","schnorrq","K12","privateKey","generatePrivateKey","generatePublicKey","publicId","preimage","seedToBytes","length","QubicConstants","SEED_ALPHABET","key","PRIVATE_KEY_LENGTH","bytes","indexOf","digest","DIGEST_LENGTH","CHECKSUM_LENGTH","ChainService","base_1","super","getLatestTick","response","call","latestTick","error","Error","message","getTickData","tickNumber","getRpcStatus","getChainHash","getQuorumTickData","getStoreHash","getHealthCheck","getComputors","epoch","getTickInfo","getBlockHeight","getLatestStats","ChainService_1","enumerable","get","baseUrl","endpoint","method","body","fetch","headers","JSON","stringify","ok","text","console","log","status","statusText","json","SIGNATURE_LENGTH","PUBLIC_KEY_LENGTH","MAX_TRANSACTION_SIZE","SPECTRUM_DEPTH","NUMBER_OF_TRANSACTIONS_PER_TICK","MAX_NUMBER_OF_CONTRACTS","EMPTY_ADDRESS","QX_ADDRESS","ARBITRATOR","QX_TRANSFER_ASSET_FEE","QX_ISSUE_ASSET_FEE","QX_ISSUE_ASSET_INPUT_TYPE","QX_TRANSFER_ASSET_INPUT_TYPE","QX_ADD_ASK_ORDER","QX_ADD_BID_ORDER","QX_REMOVE_ASK_ORDER","QX_REMOVE_BID_ORDER","QUTIL_ADDRESS","QUTIL_SENDMANY_INPUT_TYPE","QUTIL_SENDMANY_FEE","ContractService","contractAddress","address","querySmartContract","ContractService_1","provider_1","chain_1","transaction_1","identity_1","contract_1","utils_1","qx_1","options","utils","UtilityService","QubicProvider","chain","IdentityService","transaction","TransactionService","contract","qx","QxService","NONCE_LENGTH","KECCAK_STATE_LENGTH","libFourQ_K12_js_1","keccakp_js_1","allocU8","l","v","ptr","_malloc","chunk","HEAPU8","subarray","set","crypto","Promise","resolve","onRuntimeInitialized","secretKey","sk","pk","_SchnorrQ_KeyGeneration","byteOffset","_free","sign","m","s","_SchnorrQ_Sign","sig","verify","signature","HEAPU16","allocU16","Uint16Array","_SchnorrQ_Verify","ver","kex","generateCompressedPublicKey","_CompressedPublicKeyGeneration","compressedSecretAgreement","shk","_CompressedSecretAgreement","input","output","outputLength","outputOffset","o","_KangarooTwelve","keccakP160012","U32_MASK64","_32n","fromBig","n","le","h","Number","u64","split","lst","Ah","Uint32Array","Al","toBig","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","s1","B","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","getOwnedAssets","getPossessedAssets","getIssuedAssets","getBalanceByAddress","addressID","getBalanceByIdentity","Id","createIdentity","loadIdentityFromPrivateKey","verifyIdentity","test","IdentityService_1","Qubic","getAskOrders","assetName","issuerId","offset","url","encodeURIComponent","getAssetBidOrders","getEntityAskOrders","entityId","getEntityBidOrders","getFees","QxService_1","Transaction","tick","inputSize","inputType","data","sourceKey","destinationKey","amount","builtData","payload","setSourceBytes","sourceBytes","setDestinationBytes","setAmount","amountUint8Array","getPackageData","setTick","setInputSize","setPayload","setInputType","getData","getOffset","setBuiltData","getBuiltData","setDigest","getDigest","setSignature","getSignature","build","setMaxDataSize","addRaw","addInt","addShort","total","q","ArrayBuffer","setBigInt64","FromShort","FromInt","num","setInt32","setInt16","TransactionBuilder_1","getApprovedTransactions","getTransactionsStatus","txId","getTransactions","getTransferTransactions","createTransaction","from","to","encodeTransactionToBase64","byteArray","str","apply","Array","btoa","signTransaction","broadcastTransaction","encodedTransaction","TransactionService_1","createSeed","alphabet","alphabetLength","Math","floor","random","bytesToShiftedHex","SHIFTED_HEX_CHARS","hex","toUpperCase","publicKeyStringToBytes","bytes32ToString","setUint8","toLowerCase","digestBytesToString","publicKeyBytesToString","seedStringToBytes","hexToBase26","ALPHABET","base26Array","base","reverse","join","base26ToHex","base26","alphabetMap","Map","map","char","UtilityService_1","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","a","z","r","compare","b","xc","c","yc","k","e","intCheck","min","max","name","isOdd","toExponential","charAt","toFixedPoint","len","zs","clone","configObject","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","prototype","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","alphabetHasNormalDecimalDigits","caseChanged","isNum","_isBigNumber","replace","search","substring","DEBUG","format","rm","id","c0","ne","maxOrMin","args","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","obj","p","hasOwnProperty","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","minimum","dp","rand","copy","splice","sum","decimal","toBaseOut","baseIn","baseOut","arrL","arr","callerIsToString","pow","concat","multiply","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","gt","isGreaterThanOrEqualTo","gte","isLessThan","lt","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toPrecision","toJSON","Container","styled","withConfig","displayName","componentId","_ref","theme","mediaQueries","small","Heading","h1","Span","span","props","_props$theme$colors$p","colors","primary","Subtitle","_ref2","fontSizes","large","_ref3","_ref4","CardContainer","Notice","_ref5","_theme$colors$backgro","background","alternative","_ref6","_theme$colors$border","border","_ref7","_theme$colors$text","_ref8","radii","_ref9","ErrorMessage","_ref10","_theme$colors$error","muted","_ref11","_theme$colors$error2","_ref12","_theme$colors$error3","_ref13","_ref14","Index","useMetaMaskContext","isFlask","snapsDetected","installedSnap","useMetaMask","requestSnap","useRequestSnap","invokeSnap","useInvokeSnap","qubic","isMetaMaskReady","isLocalSnap","defaultSnapOrigin","_jsxs","children","_jsx","Card","content","title","description","button","InstallFlaskButton","fullWidth","ConnectButton","onClick","disabled","shouldDisplayReconnectButton","ReconnectButton","SendHelloButton","async","Boolean","privateKeyBase26"],"sourceRoot":""}